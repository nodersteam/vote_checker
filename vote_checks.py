import datetime
import json
import os
from dateutil.parser import isoparse
import requests
import schedule
import time
from config import CHAT_ID_MAINNET, CHAT_ID_TESTNET
from telegram_utils import send_telegram_message
from api_test import test_api_connection

next_check_time = None
interval = None


def check_active_votes():
    global next_check_time, interval
    if interval:
        next_check_time = datetime.datetime.now() + interval

    if not os.path.isfile('projectsinfo.txt'):
        print("–§–∞–π–ª 'projectsinfo.txt' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    with open('projectsinfo.txt', 'r') as file:
        projects = json.load(file)

    mainnet_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º mainnet
    testnet_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º testnet
    seen_proposals = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

    for project_info in projects:
        project_api = project_info.get('project_api')
        project_wallet = project_info.get('wallet_address')
        network_type = project_info.get('network_type')

        for api_version in ['v1beta1', 'v1']:
            url = f'{project_api}/cosmos/gov/{api_version}/proposals?pagination.limit=600'
            try:
                response = requests.get(url, timeout=3)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 3 —Å–µ–∫—É–Ω–¥
                response.raise_for_status()
            except requests.exceptions.Timeout:
                print(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è {project_info['project_name']}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ–µ–∫—Ç—É.")
                break
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API –¥–ª—è {project_info['project_name']}: {str(e)}")
                continue

            if response.status_code == 200:
                proposals = response.json().get('proposals', [])
                if proposals:
                    active_proposals = [p for p in proposals if p.get('status') == "PROPOSAL_STATUS_VOTING_PERIOD"]
                    if active_proposals:
                        print(f"\n–ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è {project_info['project_name']}:\n")
                        project_votes_found = True
                        for proposal in active_proposals:
                            proposal_id = proposal.get('id', proposal.get('proposal_id', 'No ID available'))

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                            if proposal_id in seen_proposals:
                                continue
                            seen_proposals.add(proposal_id)

                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ content.title –∏–ª–∏ description –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ API
                            if api_version == 'v1beta1':
                                title = proposal['content'].get('title', 'No title available')
                            elif api_version == 'v1':
                                title = proposal.get('title', 'No title available')

                            try:
                                start_time = isoparse(proposal.get('voting_start_time')).strftime(
                                    '%d %B %Y, %H:%M') if proposal.get('voting_start_time') else 'No start time'
                                end_time = isoparse(proposal.get('voting_end_time')).strftime(
                                    '%d %B %Y, %H:%M') if proposal.get('voting_end_time') else 'No end time'
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç: {e}")
                                start_time = '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã'
                                end_time = '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã'

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                            vote_url = f'{project_api}/cosmos/gov/{api_version}/proposals/{proposal_id}/votes/{project_wallet}'
                            vote_response = requests.get(vote_url)
                            voted = "Yes" if vote_response.status_code == 200 else "No"

                            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                            vote_emoji = "üü¢" if voted == "Yes" else "üî¥"

                            message = (
                                f"{vote_emoji} üåê {project_info['project_name']}\n"
                                f"‚öñÔ∏è Network: {network_type}\n"
                                f"üìú Proposal ID: {proposal_id}\n"
                                f"üìÉ Title: {title}\n"
                                f"‚è∞ Voting Start: {start_time}\n"
                                f"‚è≥ Voting End: {end_time}\n"
                                f"üó≥Ô∏è Voted: {voted}"
                            )

                            if network_type == 'mainnet':
                                mainnet_messages.append(message)
                            elif network_type == 'testnet':
                                testnet_messages.append(message)

                    else:
                        print(f"{project_info['project_name']}: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤.")
                else:
                    print(f"{project_info['project_name']}: –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
            else:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API –¥–ª—è {project_info['project_name']} —Å –∫–æ–¥–æ–º –æ—Ç–≤–µ—Ç–∞ {response.status_code}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    if mainnet_messages:
        combined_mainnet_message = "\n\n".join(mainnet_messages)
        send_telegram_message(combined_mainnet_message, 'mainnet')

    if testnet_messages:
        combined_testnet_message = "\n\n".join(testnet_messages)
        send_telegram_message(combined_testnet_message, 'testnet')

def schedule_checks():
    global interval
    while True:
        print("""
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
1. –ö–∞–∂–¥—ã–π —á–∞—Å
2. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
3. –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
        """)

        option = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: ")

        if option == '1':
            interval = datetime.timedelta(hours=1)
            print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å.")
            break
        elif option == '2':
            interval = datetime.timedelta(days=1)
            print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.")
            break
        elif option == '3':
            interval = datetime.timedelta(weeks=1)
            print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é.")
            break
        else:
            print("–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def start_auto_check_votes():
    global next_check_time
    if not interval:
        print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    print("–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–æ–≤...")
    print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≤–∞—à—É —Å–µ—Å—Å–∏—é —ç–∫—Ä–∞–Ω–∞.")
    print("–ß—Ç–æ–±—ã –æ—Ç—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏ —ç–∫—Ä–∞–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ Ctrl + A, –∑–∞—Ç–µ–º D.")
    print("–ß—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏ —ç–∫—Ä–∞–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ 'screen -r' –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.")

    next_check_time = datetime.datetime.now() + interval

    while True:
        current_time = datetime.datetime.now()
        if current_time >= next_check_time:
            print(f"\n–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–æ–≤... –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: {interval}")
            check_active_votes()
            next_check_time = current_time + interval
        time.sleep(120)  # –°–æ–Ω –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏